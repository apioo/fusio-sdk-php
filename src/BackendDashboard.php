<?php
/**
 * BackendDashboard automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */

namespace Fusio\Sdk;

use PSX\Schema\Attribute\Description;

#[Description('Represents an object containing all widget data for the dashboard')]
class BackendDashboard implements \JsonSerializable, \PSX\Record\RecordableInterface
{
    protected ?BackendStatisticChart $errorsPerOperation = null;
    protected ?BackendStatisticChart $incomingRequests = null;
    protected ?BackendStatisticChart $incomingTransactions = null;
    protected ?BackendStatisticChart $mostUsedOperations = null;
    protected ?BackendStatisticChart $timePerOperation = null;
    protected ?BackendStatisticChart $testCoverage = null;
    protected ?BackendStatisticChart $mostUsedActivities = null;
    protected ?BackendStatisticChart $activitiesPerUser = null;
    protected ?BackendStatisticChart $userRegistrations = null;
    public function setErrorsPerOperation(?BackendStatisticChart $errorsPerOperation): void
    {
        $this->errorsPerOperation = $errorsPerOperation;
    }
    public function getErrorsPerOperation(): ?BackendStatisticChart
    {
        return $this->errorsPerOperation;
    }
    public function setIncomingRequests(?BackendStatisticChart $incomingRequests): void
    {
        $this->incomingRequests = $incomingRequests;
    }
    public function getIncomingRequests(): ?BackendStatisticChart
    {
        return $this->incomingRequests;
    }
    public function setIncomingTransactions(?BackendStatisticChart $incomingTransactions): void
    {
        $this->incomingTransactions = $incomingTransactions;
    }
    public function getIncomingTransactions(): ?BackendStatisticChart
    {
        return $this->incomingTransactions;
    }
    public function setMostUsedOperations(?BackendStatisticChart $mostUsedOperations): void
    {
        $this->mostUsedOperations = $mostUsedOperations;
    }
    public function getMostUsedOperations(): ?BackendStatisticChart
    {
        return $this->mostUsedOperations;
    }
    public function setTimePerOperation(?BackendStatisticChart $timePerOperation): void
    {
        $this->timePerOperation = $timePerOperation;
    }
    public function getTimePerOperation(): ?BackendStatisticChart
    {
        return $this->timePerOperation;
    }
    public function setTestCoverage(?BackendStatisticChart $testCoverage): void
    {
        $this->testCoverage = $testCoverage;
    }
    public function getTestCoverage(): ?BackendStatisticChart
    {
        return $this->testCoverage;
    }
    public function setMostUsedActivities(?BackendStatisticChart $mostUsedActivities): void
    {
        $this->mostUsedActivities = $mostUsedActivities;
    }
    public function getMostUsedActivities(): ?BackendStatisticChart
    {
        return $this->mostUsedActivities;
    }
    public function setActivitiesPerUser(?BackendStatisticChart $activitiesPerUser): void
    {
        $this->activitiesPerUser = $activitiesPerUser;
    }
    public function getActivitiesPerUser(): ?BackendStatisticChart
    {
        return $this->activitiesPerUser;
    }
    public function setUserRegistrations(?BackendStatisticChart $userRegistrations): void
    {
        $this->userRegistrations = $userRegistrations;
    }
    public function getUserRegistrations(): ?BackendStatisticChart
    {
        return $this->userRegistrations;
    }
    public function toRecord(): \PSX\Record\RecordInterface
    {
        /** @var \PSX\Record\Record<mixed> $record */
        $record = new \PSX\Record\Record();
        $record->put('errorsPerOperation', $this->errorsPerOperation);
        $record->put('incomingRequests', $this->incomingRequests);
        $record->put('incomingTransactions', $this->incomingTransactions);
        $record->put('mostUsedOperations', $this->mostUsedOperations);
        $record->put('timePerOperation', $this->timePerOperation);
        $record->put('testCoverage', $this->testCoverage);
        $record->put('mostUsedActivities', $this->mostUsedActivities);
        $record->put('activitiesPerUser', $this->activitiesPerUser);
        $record->put('userRegistrations', $this->userRegistrations);
        return $record;
    }
    public function jsonSerialize(): object
    {
        return (object) $this->toRecord()->getAll();
    }
}
