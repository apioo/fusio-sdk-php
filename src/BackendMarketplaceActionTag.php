<?php
/**
 * BackendMarketplaceActionTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */

namespace Fusio\Sdk;

use GuzzleHttp\Exception\BadResponseException;
use Sdkgen\Client\Exception\ClientException;
use Sdkgen\Client\Exception\UnknownStatusCodeException;
use Sdkgen\Client\TagAbstract;

class BackendMarketplaceActionTag extends TagAbstract
{
    /**
     * @param string $user
     * @param string $name
     * @return CommonMessage
     * @throws CommonMessageException
     * @throws ClientException
     */
    public function upgrade(string $user, string $name): CommonMessage
    {
        $url = $this->parser->url('/backend/marketplace/action/:user/:name', [
            'user' => $user,
            'name' => $name,
        ]);

        $options = [
            'query' => $this->parser->query([
            ], [
            ]),
        ];

        try {
            $response = $this->httpClient->request('PUT', $url, $options);
            $data = (string) $response->getBody();

            return $this->parser->parse($data, CommonMessage::class);
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $data = (string) $e->getResponse()->getBody();

            switch ($e->getResponse()->getStatusCode()) {
                case 400:
                    throw new CommonMessageException($this->parser->parse($data, CommonMessage::class));
                case 401:
                    throw new CommonMessageException($this->parser->parse($data, CommonMessage::class));
                case 404:
                    throw new CommonMessageException($this->parser->parse($data, CommonMessage::class));
                case 410:
                    throw new CommonMessageException($this->parser->parse($data, CommonMessage::class));
                case 500:
                    throw new CommonMessageException($this->parser->parse($data, CommonMessage::class));
                default:
                    throw new UnknownStatusCodeException('The server returned an unknown status code');
            }
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }

    /**
     * @param string $user
     * @param string $name
     * @return MarketplaceAction
     * @throws MarketplaceMessageException
     * @throws ClientException
     */
    public function get(string $user, string $name): MarketplaceAction
    {
        $url = $this->parser->url('/backend/marketplace/action/:user/:name', [
            'user' => $user,
            'name' => $name,
        ]);

        $options = [
            'query' => $this->parser->query([
            ], [
            ]),
        ];

        try {
            $response = $this->httpClient->request('GET', $url, $options);
            $data = (string) $response->getBody();

            return $this->parser->parse($data, MarketplaceAction::class);
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $data = (string) $e->getResponse()->getBody();

            switch ($e->getResponse()->getStatusCode()) {
                case 401:
                    throw new MarketplaceMessageException($this->parser->parse($data, MarketplaceMessage::class));
                case 404:
                    throw new MarketplaceMessageException($this->parser->parse($data, MarketplaceMessage::class));
                case 410:
                    throw new MarketplaceMessageException($this->parser->parse($data, MarketplaceMessage::class));
                case 500:
                    throw new MarketplaceMessageException($this->parser->parse($data, MarketplaceMessage::class));
                default:
                    throw new UnknownStatusCodeException('The server returned an unknown status code');
            }
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }

    /**
     * @param MarketplaceInstall $payload
     * @return MarketplaceMessage
     * @throws MarketplaceMessageException
     * @throws ClientException
     */
    public function install(MarketplaceInstall $payload): MarketplaceMessage
    {
        $url = $this->parser->url('/backend/marketplace/action', [
        ]);

        $options = [
            'query' => $this->parser->query([
            ], [
            ]),
            'json' => $payload
        ];

        try {
            $response = $this->httpClient->request('POST', $url, $options);
            $data = (string) $response->getBody();

            return $this->parser->parse($data, MarketplaceMessage::class);
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $data = (string) $e->getResponse()->getBody();

            switch ($e->getResponse()->getStatusCode()) {
                case 400:
                    throw new MarketplaceMessageException($this->parser->parse($data, MarketplaceMessage::class));
                case 401:
                    throw new MarketplaceMessageException($this->parser->parse($data, MarketplaceMessage::class));
                case 500:
                    throw new MarketplaceMessageException($this->parser->parse($data, MarketplaceMessage::class));
                default:
                    throw new UnknownStatusCodeException('The server returned an unknown status code');
            }
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }

    /**
     * @param int|null $startIndex
     * @param string|null $query
     * @return MarketplaceActionCollection
     * @throws MarketplaceMessageException
     * @throws ClientException
     */
    public function getAll(?int $startIndex = null, ?string $query = null): MarketplaceActionCollection
    {
        $url = $this->parser->url('/backend/marketplace/action', [
        ]);

        $options = [
            'query' => $this->parser->query([
                'startIndex' => $startIndex,
                'query' => $query,
            ], [
            ]),
        ];

        try {
            $response = $this->httpClient->request('GET', $url, $options);
            $data = (string) $response->getBody();

            return $this->parser->parse($data, MarketplaceActionCollection::class);
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $data = (string) $e->getResponse()->getBody();

            switch ($e->getResponse()->getStatusCode()) {
                case 401:
                    throw new MarketplaceMessageException($this->parser->parse($data, MarketplaceMessage::class));
                case 500:
                    throw new MarketplaceMessageException($this->parser->parse($data, MarketplaceMessage::class));
                default:
                    throw new UnknownStatusCodeException('The server returned an unknown status code');
            }
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }


}
