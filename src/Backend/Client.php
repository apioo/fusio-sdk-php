<?php
/**
 * Client automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */

namespace Fusio\Sdk\Backend;

use GuzzleHttp\Exception\BadResponseException;
use Sdkgen\Client\ClientAbstract;
use Sdkgen\Client\Credentials;
use Sdkgen\Client\Exception\ClientException;
use Sdkgen\Client\Exception\UnknownStatusCodeException;

class Client extends ClientAbstract
{
    public function user(): UserTag
    {
        return new UserTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function trash(): TrashTag
    {
        return new TrashTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function transaction(): TransactionTag
    {
        return new TransactionTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function statistic(): StatisticTag
    {
        return new StatisticTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function sdk(): SdkTag
    {
        return new SdkTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function scope(): ScopeTag
    {
        return new ScopeTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function schema(): SchemaTag
    {
        return new SchemaTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function operation(): OperationTag
    {
        return new OperationTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function role(): RoleTag
    {
        return new RoleTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function rate(): RateTag
    {
        return new RateTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function plan(): PlanTag
    {
        return new PlanTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function page(): PageTag
    {
        return new PageTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function marketplace(): MarketplaceTag
    {
        return new MarketplaceTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function log(): LogTag
    {
        return new LogTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function generator(): GeneratorTag
    {
        return new GeneratorTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function event(): EventTag
    {
        return new EventTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function dashboard(): DashboardTag
    {
        return new DashboardTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function cronjob(): CronjobTag
    {
        return new CronjobTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function connection(): ConnectionTag
    {
        return new ConnectionTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function config(): ConfigTag
    {
        return new ConfigTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function category(): CategoryTag
    {
        return new CategoryTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function audit(): AuditTag
    {
        return new AuditTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function app(): AppTag
    {
        return new AppTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function action(): ActionTag
    {
        return new ActionTag(
            $this->httpClient,
            $this->parser
        );
    }

    public function account(): AccountTag
    {
        return new AccountTag(
            $this->httpClient,
            $this->parser
        );
    }



}
