<?php
/**
 * BackendConnectionFilesystemTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */

namespace Fusio\Sdk;

use GuzzleHttp\Exception\BadResponseException;
use Sdkgen\Client\Exception\ClientException;
use Sdkgen\Client\Exception\Payload;
use Sdkgen\Client\Exception\UnknownStatusCodeException;
use Sdkgen\Client\TagAbstract;

class BackendConnectionFilesystemTag extends TagAbstract
{
    /**
     * Uploads one or more files on the filesystem connection
     *
     * @param string $connectionId
     * @param \Sdkgen\Client\Multipart $payload
     * @return CommonMessage
     * @throws CommonMessageException
     * @throws ClientException
     */
    public function create(string $connectionId, \Sdkgen\Client\Multipart $payload): CommonMessage
    {
        $url = $this->parser->url('/backend/connection/:connection_id/filesystem', [
            'connection_id' => $connectionId,
        ]);

        $options = [
            'headers' => [
            ],
            'query' => $this->parser->query([
            ], [
            ]),
            'multipart' => $payload->getParts(),
        ];

        try {
            $response = $this->httpClient->request('POST', $url, $options);
            $body = $response->getBody();

            $data = $this->parser->parse((string) $body, \PSX\Schema\SchemaSource::fromClass(CommonMessage::class));

            return $data;
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $body = $e->getResponse()->getBody();
            $statusCode = $e->getResponse()->getStatusCode();

            if ($statusCode >= 0 && $statusCode <= 999) {
                $data = $this->parser->parse((string) $body, \PSX\Schema\SchemaSource::fromClass(CommonMessage::class));

                throw new CommonMessageException($data);
            }

            throw new UnknownStatusCodeException('The server returned an unknown status code: ' . $statusCode);
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }

    /**
     * Deletes an existing file on the filesystem connection
     *
     * @param string $connectionId
     * @param string $fileId
     * @return CommonMessage
     * @throws CommonMessageException
     * @throws ClientException
     */
    public function delete(string $connectionId, string $fileId): CommonMessage
    {
        $url = $this->parser->url('/backend/connection/:connection_id/filesystem/:file_id', [
            'connection_id' => $connectionId,
            'file_id' => $fileId,
        ]);

        $options = [
            'headers' => [
            ],
            'query' => $this->parser->query([
            ], [
            ]),
        ];

        try {
            $response = $this->httpClient->request('DELETE', $url, $options);
            $body = $response->getBody();

            $data = $this->parser->parse((string) $body, \PSX\Schema\SchemaSource::fromClass(CommonMessage::class));

            return $data;
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $body = $e->getResponse()->getBody();
            $statusCode = $e->getResponse()->getStatusCode();

            if ($statusCode >= 0 && $statusCode <= 999) {
                $data = $this->parser->parse((string) $body, \PSX\Schema\SchemaSource::fromClass(CommonMessage::class));

                throw new CommonMessageException($data);
            }

            throw new UnknownStatusCodeException('The server returned an unknown status code: ' . $statusCode);
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }

    /**
     * Returns the content of the provided file id on the filesystem connection
     *
     * @param string $connectionId
     * @param string $fileId
     * @return \Psr\Http\Message\StreamInterface
     * @throws CommonMessageException
     * @throws ClientException
     */
    public function get(string $connectionId, string $fileId): \Psr\Http\Message\StreamInterface
    {
        $url = $this->parser->url('/backend/connection/:connection_id/filesystem/:file_id', [
            'connection_id' => $connectionId,
            'file_id' => $fileId,
        ]);

        $options = [
            'headers' => [
                'Accept' => 'application/octet-stream',
            ],
            'query' => $this->parser->query([
            ], [
            ]),
        ];

        try {
            $response = $this->httpClient->request('GET', $url, $options);
            $body = $response->getBody();

            $data = $body;

            return $data;
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $body = $e->getResponse()->getBody();
            $statusCode = $e->getResponse()->getStatusCode();

            if ($statusCode >= 0 && $statusCode <= 999) {
                $data = $this->parser->parse((string) $body, \PSX\Schema\SchemaSource::fromClass(CommonMessage::class));

                throw new CommonMessageException($data);
            }

            throw new UnknownStatusCodeException('The server returned an unknown status code: ' . $statusCode);
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }

    /**
     * Returns all available files on the filesystem connection
     *
     * @param string $connectionId
     * @param int|null $startIndex
     * @param int|null $count
     * @return BackendFileCollection
     * @throws CommonMessageException
     * @throws ClientException
     */
    public function getAll(string $connectionId, ?int $startIndex = null, ?int $count = null): BackendFileCollection
    {
        $url = $this->parser->url('/backend/connection/:connection_id/filesystem', [
            'connection_id' => $connectionId,
        ]);

        $options = [
            'headers' => [
            ],
            'query' => $this->parser->query([
                'startIndex' => $startIndex,
                'count' => $count,
            ], [
            ]),
        ];

        try {
            $response = $this->httpClient->request('GET', $url, $options);
            $body = $response->getBody();

            $data = $this->parser->parse((string) $body, \PSX\Schema\SchemaSource::fromClass(BackendFileCollection::class));

            return $data;
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $body = $e->getResponse()->getBody();
            $statusCode = $e->getResponse()->getStatusCode();

            if ($statusCode >= 0 && $statusCode <= 999) {
                $data = $this->parser->parse((string) $body, \PSX\Schema\SchemaSource::fromClass(CommonMessage::class));

                throw new CommonMessageException($data);
            }

            throw new UnknownStatusCodeException('The server returned an unknown status code: ' . $statusCode);
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }

    /**
     * Updates an existing file on the filesystem connection
     *
     * @param string $connectionId
     * @param string $fileId
     * @param \Sdkgen\Client\Multipart $payload
     * @return CommonMessage
     * @throws CommonMessageException
     * @throws ClientException
     */
    public function update(string $connectionId, string $fileId, \Sdkgen\Client\Multipart $payload): CommonMessage
    {
        $url = $this->parser->url('/backend/connection/:connection_id/filesystem/:file_id', [
            'connection_id' => $connectionId,
            'file_id' => $fileId,
        ]);

        $options = [
            'headers' => [
            ],
            'query' => $this->parser->query([
            ], [
            ]),
            'multipart' => $payload->getParts(),
        ];

        try {
            $response = $this->httpClient->request('PUT', $url, $options);
            $body = $response->getBody();

            $data = $this->parser->parse((string) $body, \PSX\Schema\SchemaSource::fromClass(CommonMessage::class));

            return $data;
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $body = $e->getResponse()->getBody();
            $statusCode = $e->getResponse()->getStatusCode();

            if ($statusCode >= 0 && $statusCode <= 999) {
                $data = $this->parser->parse((string) $body, \PSX\Schema\SchemaSource::fromClass(CommonMessage::class));

                throw new CommonMessageException($data);
            }

            throw new UnknownStatusCodeException('The server returned an unknown status code: ' . $statusCode);
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }



}
